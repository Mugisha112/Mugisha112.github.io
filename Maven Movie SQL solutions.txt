/*Solution 1*/

SELECT 
    s.store_id,
    CONCAT(first_name, ' ', last_name) AS Manager_name,
    CONCAT(address, ', ', city, ', ', district, ', ', country) AS Store_full_address
FROM
    store as s
        JOIN
    staff as st ON s.manager_staff_id = st.staff_id
        JOIN
    address as a ON s.address_id = a.address_id
        JOIN
    city as c ON c.city_id = a.city_id
        JOIN
    country as co ON co.country_id = c.country_id

/*Solution 2*/

SELECT 
    i.store_id,
    i.inventory_id,
    f.title,
    f.rating,
    f.rental_rate,
    f.replacement_cost
FROM
    inventory AS i
        JOIN
    film AS f ON f.film_id = i.film_id
ORDER BY store_id

/*Solution 3*/

SELECT 
    i.store_id,
    f.rating,
    COUNT(i.inventory_id) AS Total_inventory
FROM
    film AS f
        JOIN
    inventory AS i ON f.film_id = i.film_id
GROUP BY 1, 2
ORDER BY store_id

/*Solution 4*/

SELECT 
    i.store_id,
    c.name Category,
    COUNT(i.inventory_id) AS Number_of_films,
    ROUND(AVG(replacement_cost), 2) AS Average_replacement_cost,
    SUM(replacement_cost) AS Total_replacement_cost
FROM
    film AS f
        JOIN
    inventory AS i ON f.film_id = i.film_id
        JOIN
    film_category AS fc ON i.film_id = fc.film_id
        JOIN
    category AS c ON fc.category_id = c.category_id
GROUP BY 1, 2
ORDER BY 1

/*Used film_category table inner join on category to get the cotegory name but no need of having an expression in the select statement from the film_category table - BRIDGE example*/

/*Solution 5*/

SELECT 
    CONCAT(first_name, ' ', last_name) AS Customer_name,
    c.store_id,
    CASE WHEN active = 1 THEN 'Active' ELSE 'Inactive' END AS Status,
    CONCAT(address, ', ', city, ', ', country) AS Customer_full_address
FROM
    customer AS c
        JOIN
    address AS a ON c.address_id = a.address_id
        JOIN
    city AS ct ON a.city_id = ct.city_id
        JOIN
    country AS co ON co.country_id = ct.country_id
ORDER BY 2, 3

/*Used CASE statement to rename rows in Active column from customer table. Renamed new CASE column with Alias. CASE sattement can be used to rename rows based on wording in question asked like in this case they asked to see ACTIVE status and from a visual perspective seeing Active is better than having to explain 1 vs 0 in the active column in customer table*/

/*Solution 6*/


SELECT 
    CONCAT(first_name, ' ', last_name) AS Customer_name,
    COUNT(p.rental_id) AS Lifetime_rentals,
    SUM(p.amount) AS Total_payments
FROM
    customer AS c
        JOIN
    payment AS p ON c.customer_id = p.customer_id
GROUP BY Customer_name
ORDER BY Total_payments DESC

/*You have to ask the employer to define lifetime value and most valuable. I have decided to define value based on the amount paid so most valuable customers are the one who spent the most money hence ordering by total payments*/ 

/*Solution 7*/

SELECT 
    'Advisor' AS Title,
    CONCAT(first_name, ' ', last_name) AS Full_name,
    Null As Company_name
FROM
    advisor 
UNION SELECT 
    'Investor',
    CONCAT(first_name, ' ', last_name) AS Full_name,
    company_name
FROM
    investor

/*When using a UNION the arrangement and naming (aliases) of the columns in the first select statement are the one that matter therefore any select statements after need to only have the same number of columns like in the above there is no need for using aliases in the second select statements as they have been defined in the first select statement*/ 

/*Solution 8*/

SELECT 
    CASE WHEN awards = 'Emmy, Oscar, Tony ' THEN '3 awards' WHEN awards IN ('Emmy, Oscar', 'Emmy, Tony', 'Oscar, Tony') THEN '2 awards' 
    ELSE '1 award' END  'Number of awards', (COUNT(actor_id)/COUNT(actor_award_id)) * 100 '% of awarded actors we carry film'
FROM
    actor_award AS a
    Group by Case when awards = 'Emmy, Oscar, Tony ' THEN '3 awards' When awards IN ('Emmy, Oscar', 'Emmy, Tony', 'Oscar, Tony') then '2 awards' 
    ELSE '1 award' END
Order by 1

/*When a select statement has more than one operator then use BODMAS to determine the order of operation used to get the result. Grouped by CASE statement but could use alias in this case.
Instead of my count calculation, I can also use - avg(case when actor_id is null then 0 ELSE 1 end). This basically takes the actor_id column and assings 0 to row with NULL and then 1 to rows with an actor ID and then takes the average grouped by CASE statement this means no need of a count*/

